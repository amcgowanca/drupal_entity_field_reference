<?php
/**
 * @file
 * entity_field_reference.module
 */

/**
 * Implements hook_field_info().
 */
function entity_field_reference_field_info() {
  return array(
    'entity_field_reference' => array(
      'label' => t('Entity Field Reference'),
      'default_widget' => 'options_buttons',
      'default_formatter' => 'entity_field_reference_field_label',
      'property_type' => 'text',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function entity_field_reference_field_widget_info() {
  return array();
}

/**
 * Implements hook_field_widget_info_alter().
 */
function entity_field_reference_field_widget_info_alter(&$info) {
  foreach (array('options_buttons', 'options_select') as $widget_type) {
    $info[$widget_type]['field types'][] = 'entity_field_reference';
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function entity_field_reference_field_formatter_info() {
  return array(
    'entity_field_reference_field_label' => array(
      'label' => t('Field label'),
      'description' => t('Renders the label of the selected fields.'),
      'field types' => array('entity_field_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function entity_field_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'entity_field_reference_field_label':
      $labels = array();
      $field_info = field_info_instances($field['settings']['target_type'], $field['settings']['target_bundle']);
      foreach ($items as $delta => $item) {
        if (isset($field_info[$item['field_name']])) {
          $labels[$item['field_name']] = check_plain($field_info[$item['field_name']]['label']);
        }
      }

      $element += array(
        '#theme' => 'item_list',
        '#type' => 'ul',
        '#items' => $labels,
      );
      break;
  }
  return $element;
}

/**
 * Implement hook_field_is_empty().
 */
function entity_field_reference_field_is_empty($item, $field) {
  return empty($item['field_name']);
}

/**
 * Implements hook_field_settings_form().
 */
function entity_field_reference_field_settings_form($field, $instance, $has_data) {
  $form = array(
    '#type' => 'container',
    '#field' => $field,
    '#process' => array(
      '_entity_field_reference_field_settings_form_process',
    ),
    '#element_validate' => array('_entity_field_reference_field_settings_form_validate'),
    '#instance' => $instance,
    '#has_data' => $has_data,
    '#submit' => array('entity_field_reference_field_settings_form_ajax_submit'),
  );
  return $form;
}

/**
 * Builds the field settings form elements.
 *
 * @see entity_field_reference_field_settings_form().
 */
function _entity_field_reference_field_settings_form_process($form, $form_state) {
  $field = isset($form_state['entity_field_reference']['field']) ? $form_state['entity_field_reference']['field'] : $form['#field'];

  $entity_type_options = array();
  foreach (entity_get_info() as $entity_type => $entity_info) {
    $entity_type_options[$entity_type] = $entity_info['label'];
  }

  $form['target_type'] = array(
    '#type' => 'select',
    '#title' => t('Target type'),
    '#options' => $entity_type_options,
    '#empty_option' => t('Select an entity type'),
    '#empty_value' => 0,
    '#required' => TRUE,
    '#description' => t('The entity type that its fields are referenced through this field.'),
    '#disabled' => $form['#has_data'],
    '#size' => 1,
    '#default_value' => !empty($field['settings']['target_type']) ? $field['settings']['target_type'] : '',
    '#ajax' => array(
      'callback' => 'entity_field_reference_field_settings_ajax',
      'wrapper' => $form['#id'],
      'element' => $form['#array_parents'],
    ),
  );

  if (!empty($field['settings']['target_type'])) {
    $entity_bundle_options = array();
    $entity_info = entity_get_info($field['settings']['target_type']);
    foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
      $entity_bundle_options[$bundle_name] = $bundle_info['label'];
    }

    $form['target_bundle'] = array(
      '#type' => 'select',
      '#title' => t('Target bundle'),
      '#options' => $entity_bundle_options,
      '#empty_option' => t('Select an entity bundle'),
      '#empty_value' => 0,
      '#required' => TRUE,
      '#description' => t('The bundle type that its fields are referenced through this field.'),
      '#default_value' => !empty($field['settings']['target_bundle']) ? $field['settings']['target_bundle'] : '',
    );
  }

  return $form;
}

/**
 * Form validate callback for field settings form.
 */
function _entity_field_reference_field_settings_form_validate($form, &$form_state) {
  $field = $form['#field'];
  if (isset($form_state['values']['field'])) {
    $field['settings'] = $form_state['values']['field']['settings'];
  }
  $form_state['entity_field_reference']['field'] = $field;
}

/**
 * Callback for the field settings AJAX elements.
 */
function entity_field_reference_field_settings_ajax($form, $form_state) {
  $trigger = $form_state['triggering_element'];
  return drupal_array_get_nested_value($form, $trigger['#ajax']['element']);
}

/**
 * Submit handler for the AJAX handler; forces the rebuilding of the form.
 */
function entity_field_reference_field_settings_form_ajax_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_options_list().
 */
function entity_field_reference_options_list($field, $instance, $entity_type, $entity) {
  $items = array();
  if (!empty($field['settings']['target_type']) && !empty($field['settings']['target_bundle'])) {
    foreach (field_info_instances($field['settings']['target_type'], $field['settings']['target_bundle']) as $field_name => $field_info) {
      $items[$field_name] = check_plain($field_info['label']);
    }
  }
  return $items;
}
